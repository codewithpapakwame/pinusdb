package cn.pinusdb.jdbc;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.List;


public class PDBStatement implements java.sql.Statement {

	private ResultSet resultSet_;
	private int updateCnt_;
	private PDBConnection conn_;
	private PDBCommand cmd_;

	/**
	 * Maximum number of rows to return, 0 = unlimited.
	 */
	protected int maxrows = 0;

	/**
	 * Number of rows to get in a batch.
	 */
	protected int fetchSize = 0;
	
	public PDBStatement(PDBConnection conn) {
		this.resultSet_ = null;
		this.updateCnt_ = 0;
		this.conn_ = conn;
		this.cmd_ = conn_.createCommand();
	}
	
	protected int getSqlBeginPos(String str) {
		int len = str.length();
		int bgPos = 0;
		boolean endFlag = false;
		
		while (bgPos < (len - 1) && (!endFlag))
		{
			switch(str.charAt(bgPos)) {
			case ' ':
			case '\t':
			case '\n':
			case '\f':
			case '\r':
				bgPos++;
				break;
			case '-':
				if (str.charAt(bgPos + 1) == '-') {
					bgPos = str.indexOf("\n", bgPos);
					if (bgPos == -1) {
						return -1;
					} else {
						bgPos++;
					}
				}
				else {
					endFlag = true;
				}
				break;
			default:
				endFlag = true;
			}
		}
		
		return bgPos;
	}
	
	protected int[] batchInsert(String tabName, List<String> colList, List<Object> valList) throws SQLException {
		int[] retArr = this.cmd_.executeInsertTable(tabName, colList, valList);
		updateCnt_ = this.cmd_.getSuccessCnt();
		return retArr;
	}
	
	@Override
	public boolean isWrapperFor(Class<?> arg0) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public <T> T unwrap(Class<T> arg0) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public void addBatch(String arg0) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public void cancel() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public void clearBatch() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public void clearWarnings() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public void close() throws SQLException {
		resultSet_ = null;
		updateCnt_ = -1;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		resultSet_ = null;
		updateCnt_ = 0;
		int pos = getSqlBeginPos(sql);
		if (pos == -1) {
			throw new SQLException(PDBErrCode.errMsg(PDBErrCode.PdbE_SQL_ERROR), 
				"58005", PDBErrCode.PdbE_SQL_ERROR);
		}
		
		String cmdType = sql.substring(pos, pos + 6);
		if (cmdType.compareToIgnoreCase("insert") == 0) {
			int retVal = cmd_.executeInsert(sql);
			updateCnt_ = cmd_.getSuccessCnt();
			if (retVal != PDBErrCode.PdbE_OK) {
				throw new SQLException(PDBErrCode.errMsg(retVal),
					"58005", retVal);
			}
		} else if (cmdType.compareToIgnoreCase("select") == 0) {
			resultSet_ = cmd_.executeQuery(sql);
			updateCnt_ = -1;
			if (resultSet_ != null)
				return true;
		} else {
			cmd_.executeNonQuery(sql);
		}
		
		return false;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public int[] executeBatch() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		resultSet_ = null;
		updateCnt_ = 0;
		resultSet_ = cmd_.executeQuery(sql);
		return resultSet_;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		resultSet_ = null;
		updateCnt_ = 0;
		int pos = getSqlBeginPos(sql);
		if (pos == -1) {
			throw new SQLException(PDBErrCode.errMsg(PDBErrCode.PdbE_SQL_ERROR), 
				"58005", PDBErrCode.PdbE_SQL_ERROR);
		}

		String cmdType = sql.substring(pos, pos + 6);
		if (cmdType.compareToIgnoreCase("insert") == 0) {
			int retVal = cmd_.executeInsert(sql);
			updateCnt_ = cmd_.getSuccessCnt();
			if (retVal != PDBErrCode.PdbE_OK) {
				throw new SQLException(PDBErrCode.errMsg(retVal),
					"58005", retVal);
			}
			return updateCnt_;
		} else if (cmdType.compareToIgnoreCase("select") == 0) {
			throw new SQLException("本方法不支持查询", "58005", PDBErrCode.PdbE_SQL_ERROR);
		} else {
			cmd_.executeNonQuery(sql);
			return 0;
		}
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public Connection getConnection() throws SQLException {
		return this.conn_;
	}

	@Override
	public int getFetchDirection() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public int getFetchSize() throws SQLException {
		return 0;
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法");
	}

	@Override
	public int getMaxRows() throws SQLException {
		return 0;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return resultSet_;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public int getResultSetType() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public int getUpdateCount() {
		return updateCnt_;
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public boolean isClosed() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public boolean isPoolable() throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public void setEscapeProcessing(boolean arg0) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		if (rows < 0) {
			throw new SQLException("Invalid fetch param", "58005", PDBErrCode.PdbE_SQL_ERROR);
		}
		fetchSize = rows;
	}

	@Override
	public void setMaxFieldSize(int arg0) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public void setMaxRows(int arg0) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public void setPoolable(boolean arg0) throws SQLException {
		throw new UnsupportedOperationException("不支持的方法"); 
	}

	@Override
	public void setQueryTimeout(int arg0) throws SQLException {
		
	}
	
}

